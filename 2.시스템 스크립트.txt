#!/bin/sh

$(yum -y install xinetd)
$(systemctl restart xinetd)
$(yum -y install httpd-tools)
$(yum -y install sysstat)


system()
{
echo
echo "###################################################################################"
echo "###################################################################################"
echo "				           시스템 점검                                  	          "
echo "###################################################################################"
echo "###################################################################################"
echo
return 0
}



demo()
{
        echo
        echo "###################################################################################"
        echo "1.  엔진 상태                                           "
        echo "###################################################################################"
        mkdir -p /$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}')
        systemctl list-units --all | grep active | grep loaded | awk '{print $1,$3}'>/$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}')/active_loaded
        systemctl list-units --all | grep active | grep "not-found" | awk '{print $2,$4}'>/$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}')/active_not_found
        systemctl list-units --all | grep inactive | grep "loaded" | awk '{print $1,$3}'>/$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}')/inactive_loaded
        systemctl list-units --all | grep inactive | grep "not-found" | awk '{print $2,$4}'>/$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}')/inactive_not_found
        systemctl list-unit-files | grep enabled >/$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}')/enabled
        systemctl list-unit-files | grep disabled >/$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}')/disabled
        systemctl list-unit-files | grep static >/$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}')/static
        systemctl list-units --all | grep failed  | awk '{print $2,$4}' >/$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}')/failed
        echo
        echo
        echo  /$(date | awk '{print $1}')/$(date | awk '{print $2}')/$(date | awk '{print $3}')$(date | awk '{print $4}') "디렉터리에 저장하였습니다."
        echo
        echo
return 0
exit 0
}






spee()
{
        echo
        echo "###################################################################################"
        echo "2.  응답시간 점검                                          "
        echo "###################################################################################"
        echo
        echo
        echo "naver : "
        ab http://naver.com/ | grep "Time taken for tests" 
        echo "daum : "
        ab http://daum.net/ | grep "Time taken for tests"
        echo "google : "
        ab http://google.com/ | grep "Time taken for tests"
        echo
        echo
return 0
exit 0
}





tim()
{
        echo
        echo "###################################################################################"
        echo "3.  CPU점유율 점검                                        "
        echo "###################################################################################"
        echo
        echo
        ps -eo pcpu,pid,user,comm | sort -k1 -r | head -6
        echo
        echo
return 0
exit 0
}

cpu()
{
        echo
        echo "###################################################################################"
        echo "4.  CPU 총 사용량                                          "
        echo "###################################################################################"
        echo
   cpu_total_usage=$(mpstat | tail -1 | awk '{print 100-$NF}')
   echo 
   echo
   if [ `expr $cpu_total_usage \< 80` == 1 ];then
      echo " CPU 총 사용량 80%미만으로 상태 양호합니다."
   else
      echo " CPU 총 사용량 80%초과로 과부하 상태입니다. Disk I/O나 메모리 상태를 확인하세요."
   fi
   echo
   echo
}


laninfo()
{
        echo
        echo "###################################################################################"
        echo "5.  회선점검                                     "
        echo "###################################################################################"
        echo
        lan=$(ethtool ens33 | grep "detected:" | awk '{ print $3 }')
        lan1="yes"
        if [ $lan == $lan1 ]; then
                echo
                echo "회선이 정상적으로 연결되어 있습니다"
                echo
        else
                echo
                echo "회선이 연결되어 있지 않습니다"
                echo
        fi
        echo $(ethtool ens33 | grep yes)
        echo
        echo
return 0
exit 0
}


netinterface()
{
        echo
        echo "###################################################################################"
        echo "6.  네트워크 인터페이스 점검                                      "
        echo "###################################################################################"
        echo
        $(ifconfig ens33 > interface)

        inter1=$(sed 's/(/( /' interface | grep "RX packets" | awk '{ print $7}')
        inter2=$(sed 's/(/( /' interface | grep "TX packets" | awk '{ print $7}')
        nu=0
        if [ $inter1 != $nu ]; then
                if [ $inter2 != $nu ]; then
                        echo
                        echo 네트워크 인터페이스 정상 작동중
                        echo
                else
                        return
                fi
        else
                echo
                echo 네트워크 인터페이스 오류
                echo
        fi
        rm -rf interface
echo
return 0
exit 0

}


gwinfo()
{
        echo
        echo "###################################################################################"
        echo "7.  Default Gateway 점검                                "
        echo "###################################################################################"
        echo
        echo
        gw=$(route | grep UG | awk '{ print $4}')
        gw1="UG"

        if [ -z $gw ]; then
                echo "DEFAULT GATEWAY가 설정되어 있지 않습니다"

        else
                echo "DEFAULT GATEWAY가 설정되어 있습니다"
        fi
        echo
	echo $(route -n | grep "UG" | awk '{ print $2 }')
echo	
return 0
exit 0
}

ioinfo()
{
        echo
        echo "###################################################################################"
        echo "8.  네트워크 I/O 점검                                "
        echo "###################################################################################"
        echo
        echo
        rxer=$(netstat -i | grep ens33 | awk '{ print $4}')
        rxdr=$(netstat -i | grep ens33 | awk '{ print $5}')
        rxov=$(netstat -i | grep ens33 | awk '{ print $6}')
        txer=$(netstat -i | grep ens33 | awk '{ print $8}')
        txdr=$(netstat -i | grep ens33 | awk '{ print $9}')
        txov=$(netstat -i | grep ens33 | awk '{ print $10}')
        er="0"

        if [ $rxer == $er ]; then
                if [ $rxdr == $er ]; then
                        if [ $rxov == $er ]; then
                                echo "패킷 송신에서 문제가 발견되지 않았습니다"
                        else
                                echo "송신중 버퍼의 overflow로 인해 누락된 패킷이 있>습니다"

                        fi

                else
                        echo"송신중 누락된 패킷이 있습니다"

                fi

        else
                echo "송신중 오류가 발생한 패킷이 있습니다"

        fi


        if [ $txer == $er ]; then
                if [ $txdr == $er ]; then
                        if [ $txov == $er ]; then
                                echo "패킷 수신에서 문제가 발견되지 않았습니다"
                        else
                                echo "수신중 버퍼의 overflow로 인해 누락된 패킷이 있>습니다"
                        fi
                else
                        echo"수신중 누락된 패킷이 있습니다"
                fi
        else
                echo "수신중 오류가 발생한 패킷이 있습니다"
        fi
	
        echo
        echo
return 0
exit 0
}


ipinfo()
{
        echo
        echo "###################################################################################"
        echo "9.  IP 충돌 점검                                "
        echo "###################################################################################"
        echo
        echo
        myip=$(arping -I ens33 -c 3 192.168.131.100 | grep Received | awk '{ print $2 }')
        coli=0
        if [ $myip == $coli ]; then
                echo "IP 충돌이 발견되지 않았습니다"
        else
                echo "IP의 충돌이 발견되었습니다"

        fi
	
        echo
echo
return 0
exit 0
}



potinfo()
{
        echo
        echo "###################################################################################"
        echo "10.  네트워크 Port 점검                                "
        echo "###################################################################################"
        echo
        echo
        pot=$(netstat -t | grep CLOSING | awk '{ print $6}')
        clo="CLOSING"
        pro=$(netstat -t | grep CLOSING | awk '{ print $1}')
        if [ $pot -o $clo ]; then
                echo "전송중 유실된 메시지가 있습니다"
                echo "Network State CLOSING"
                echo "CLOSING Proto is $pro"
        else
                echo "네트워크 포트가 정상입니다"
        fi
	
        echo
echo
return 0
exit 0
}





disk()
{
        echo
        echo "###################################################################################"
        echo "11.  디스크 사용률 확인                                       "
        echo "###################################################################################"
        echo
        echo
        str=`df -k | awk {'print $5$6'} | sed 's/Use%Mounted//g'`

result="Check it"
#echo $str


for temp in `echo $str`
do

 num=`expr index $temp %`
 value=`expr substr $temp 1 $num |sed 's/%//g'`

 max=90
 if [ "$value" -gt "$max" ]
 then
  #echo "$value"
  length=`expr ${#temp}`
  let "start = $num+1"
  let "count =$length-$num+1"
  dir=`expr substr $temp $start $count`
  result="$result [\"$dir\" used=$value%]" 
  result_bool="true"
 fi
done
if [ $result_bool ]
then
  echo "사용률이 90%를 초과한 디스크가 존재합니다."
echo "$result"
else
  echo "디스크 사용률이 90% 미만으로 정상입니다."
 fi

        echo
        echo
return 0
}

mem()
{
        echo
        echo "###################################################################################"
        echo "12.  메모리 확인                                          "
        echo "###################################################################################"
        echo
        echo
        MEM_TOT=`free | grep ^Mem | awk '{print $2}'`
        MEM_FRE=`free | grep ^Mem | awk '{print $4}'`
        MEM_BC=`free | grep ^Mem | awk '{print $6}'`
        
        MEM_CAH=`free | grep ^Mem | awk '{print $7}'`
        REAL_MEM_FREE=$(($MEM_FRE+$MEM_BUF+$MEM_CAH))
        REAL_MEM_USED=`free | grep ^Mem | awk '{print $3}'`
        per_cent=`free | grep ^Mem | awk '{print $7}'`
       
        echo "================================================================="
        echo "======================== 메모리 공간============================="
        echo " 총 공간(Mem total)             : $MEM_TOT "
        echo " 명목상의 여유공간(Mem free)    : $MEM_FRE "
        echo " 버퍼/캐시 공간(Mem buff/cache) : $MEM_BC "
        echo " 사용중인 공간                  : $REAL_MEM_USED "
        echo " 남은 공간                      : $per_cent"
        echo
        echo
              
return 0
}

netinfo()
{
        echo
        echo "###################################################################################"
        echo "13.  네트워크 정보 확인                                          "
        echo "###################################################################################"
        network=$(netstat -i)
        echo
        echo
        echo "$network"
        echo
return 0
}
net()
{
        echo
        echo
        echo "###################################################################################"
        echo "14.  네트워크 연결 상태 확인                                          "
        echo "###################################################################################"
        echo
        echo
        echo "================= 168.126.63.1서버 ping점검합니다. =================="
        echo
        echo

	echo "[*] ping 168.126.63.1"
	ping -c 1 168.126.63.1 >/dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    echo "외부 네트워크 연결 : [  OK  ] "
	else
	    echo "외부 네트워크 연결 : [ FAIL ] "
	    
	fi
	
	echo

        echo
        
        echo
return 0
exit 0
}


system >> test2
demo >> test2
spee >> test2
tim >> test2
cpu >> test2
laninfo >> test2
netinterface >> test2
gwinfo >> test2
ioinfo >> test2
ipinfo >> test2
potinfo >> test2
disk >> test2
mem >> test2
netinfo >> test2
net >> test2